{
  "name": "cleansocket",
  "version": "0.1.1",
  "description": "Cleans up old sockets before listening",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {},
  "devDependencies": {
    "tap": "~0.4.6"
  },
  "scripts": {
    "test": "tap test/*.test.js"
  },
  "keywords": [
    "http",
    "net",
    "socket",
    "EADDRINUSE"
  ],
  "author": {
    "name": "Brian J Brennan"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/brianloveswords/cleansocket.git"
  },
  "bugs": {
    "url": "https://github.com/brianloveswords/cleansocket/issues"
  },
  "readme": "# cleansocket [![Build Status](https://secure.travis-ci.org/brianloveswords/cleansocket.png?branch=master)](http://travis-ci.org/brianloveswords/cleansocket)\n\nCleans up old sockets before listening on them.\n\nWhen trying to listen on a socketfile, a server will emit an `EADDRINUSE` error even if the socket is no longer alive. @dshaw [came up with a rad solution](https://gist.github.com/dshaw/9f93cdcd3a77b9142e51) but it still doesn't check to see if the socket is dead before blowing it away.\n\n`cleansocket` ensures that the file is indeed a socket and that it's not still listening for connections before it deletes the file. It also provides a way to override all `.listen()` methods so it does this automatically.\n\n## Install\n\n```bash\n$ npm install cleansocket\n```\n## Example\n\n```js\nconst cleansocket = require('cleansocket')\nconst net = require('net')\nconst server = net.createServer(function(socket){\n  socket.pipe(socket)\n})\n\ncleansocket('/tmp/echo.sock', function(error, socketfile) {\n  // if the file was unable to be removed for some reason, there would\n  // be an error. Otherwise the original filename is returned\n  server.listen(socketfile)\n})\n```\n\nYou can also globally hijack all `.listen()` functions:\n\n```js\nrequire('cleansocket/listen')\n\nconst net = require('net')\nconst server = http.createServer()\nserver.on('request', function(req, res){\n  req.pipe(res)\n})\n\n// will call `cleansocket` before trying to listen. Add an `error`\n// listener to server to catch and deal with any errors\nserver.listen('/tmp/http-echo.sock')\n```\n\n## Errors\n\n\n#### <code>FileExists</code>\n\nEmitted if the file exists and is **not** a socket. The following properties are added to the error in addition to the standard ones:\n\n* `stats`: An [fs.Stats](http://nodejs.org/api/fs.html#fs_class_fs_stats) object.\n* `filename`: Name of the file\n\n#### <code>SocketNotDead</code>\n\nEmitted when the file is a socket, but it is still accepting connections.\n\n\n## License\n\nMIT\n\n```\nCopyright (c) 2013 Brian J. Brennan\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/brianloveswords/cleansocket",
  "_id": "cleansocket@0.1.1",
  "_from": "cleansocket@"
}
